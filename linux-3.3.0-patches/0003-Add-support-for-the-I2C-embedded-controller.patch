From 8186000708356fb4cbb7c2eb6ed4b39d9bc4f825 Mon Sep 17 00:00:00 2001
From: Fabrizio Ghiringhelli <fghiro@gmail.com>
Date: Mon, 3 Sep 2012 17:10:51 +0200
Subject: [PATCH] Add support for the I2C embedded controller

'KConfig': I2C_BITBANG_8815NHK option has been eliminated.
           Now the I2C bit-banging function is automatically
           selected upon choosing I2C_GPIO option.
           To use the Nomadik I2C embedded controller simply
           deselect the I2C_GPIO option.

'i2c-8815nhk.c': added resources and initialization code for the
                 Nomadik I2C embedded controller.
---
 arch/arm/mach-nomadik/Kconfig       |    6 --
 arch/arm/mach-nomadik/Makefile      |    2 +-
 arch/arm/mach-nomadik/i2c-8815nhk.c |   95 ++++++++++++++++++++++++++++++----
 3 files changed, 84 insertions(+), 19 deletions(-)

diff --git a/arch/arm/mach-nomadik/Kconfig b/arch/arm/mach-nomadik/Kconfig
index 3c5e0f5..c1f3f78 100644
--- a/arch/arm/mach-nomadik/Kconfig
+++ b/arch/arm/mach-nomadik/Kconfig
@@ -12,10 +12,4 @@ endmenu
 config NOMADIK_8815
 	bool
 
-config I2C_BITBANG_8815NHK
-	tristate "Driver for bit-bang busses found on the 8815 NHK"
-	depends on I2C && MACH_NOMADIK_8815NHK
-	select I2C_ALGOBIT
-	default y
-
 endif
diff --git a/arch/arm/mach-nomadik/Makefile b/arch/arm/mach-nomadik/Makefile
index a6bbd1a..9a2d2ac 100644
--- a/arch/arm/mach-nomadik/Makefile
+++ b/arch/arm/mach-nomadik/Makefile
@@ -16,4 +16,4 @@ obj-$(CONFIG_NOMADIK_8815) += cpu-8815.o
 obj-$(CONFIG_MACH_NOMADIK_8815NHK) += board-nhk8815.o
 
 # Nomadik extra devices
-obj-$(CONFIG_I2C_BITBANG_8815NHK) += i2c-8815nhk.o
+obj-$(CONFIG_I2C) += i2c-8815nhk.o
diff --git a/arch/arm/mach-nomadik/i2c-8815nhk.c b/arch/arm/mach-nomadik/i2c-8815nhk.c
index 0fc2f6f..d5d76fb 100644
--- a/arch/arm/mach-nomadik/i2c-8815nhk.c
+++ b/arch/arm/mach-nomadik/i2c-8815nhk.c
@@ -1,27 +1,43 @@
+/*
+ *  linux/arch/arm/mach-nomadik/i2c-8815nhk.c
+ *
+ *  Updated 2012 Fabrizio Ghiringhelli <fghiro@gmail.com>
+ *
+ *  NHK15 board specifc i2c driver definition
+ */
 #include <linux/module.h>
 #include <linux/init.h>
 #include <linux/i2c.h>
 #include <linux/i2c-algo-bit.h>
 #include <linux/i2c-gpio.h>
 #include <linux/platform_device.h>
+
+#include <mach/hardware.h>
+#include <mach/irqs.h>
 #include <plat/gpio-nomadik.h>
 
 /*
  * There are two busses in the 8815NHK.
- * They could, in theory, be driven by the hardware component, but we
- * use bit-bang through GPIO by now, to keep things simple
+ * They can be driven either by the hardware component, or by bit-bang through
+ * GPIO.
  */
 
+#define	I2C_SCL0_PIN	62
+#define	I2C_SDA0_PIN	63
+#define	I2C_SCL1_PIN	53
+#define	I2C_SDA1_PIN	54
+
+#if defined (CONFIG_I2C_GPIO)
 static struct i2c_gpio_platform_data nhk8815_i2c_data0 = {
 	/* keep defaults for timeouts; pins are push-pull bidirectional */
-	.scl_pin = 62,
-	.sda_pin = 63,
+	.scl_pin = I2C_SCL0_PIN,
+	.sda_pin = I2C_SDA0_PIN,
 };
 
 static struct i2c_gpio_platform_data nhk8815_i2c_data1 = {
 	/* keep defaults for timeouts; pins are push-pull bidirectional */
-	.scl_pin = 53,
-	.sda_pin = 54,
+	.scl_pin = I2C_SCL1_PIN,
+	.sda_pin = I2C_SDA1_PIN,
 };
 
 /* first bus: GPIO XX and YY */
@@ -53,13 +69,68 @@ static int __init nhk8815_i2c_init(void)
 
 	return 0;
 }
+arch_initcall(nhk8815_i2c_init);
+
+
+#else
+
+static struct resource nhk8815_i2c_resources[] = {
+	{
+		.start = NOMADIK_I2C0_BASE,
+		.end = NOMADIK_I2C0_BASE + SZ_4K - 1,
+		.flags = IORESOURCE_MEM,
+	}, {
+		.start = IRQ_I2C0,
+		.end = IRQ_I2C0,
+		.flags = IORESOURCE_IRQ,
+	}, {
+		.start = NOMADIK_I2C1_BASE,
+		.end = NOMADIK_I2C1_BASE + SZ_4K - 1,
+		.flags = IORESOURCE_MEM,
+	}, {
+		.start = IRQ_I2C1,
+		.end = IRQ_I2C1,
+		.flags = IORESOURCE_IRQ,
+	}
+};
+
+/* first bus: i2c0 */
+static struct platform_device nhk8815_i2c_dev0 = {
+	.name		= "stn8815_i2c",
+	.id		= 0,
+	.resource	= &nhk8815_i2c_resources[0],
+	.num_resources	= 2,
+};
 
-static void __exit nhk8815_i2c_exit(void)
+/* second bus: i2c1 */
+static struct platform_device nhk8815_i2c_dev1 = {
+	.name		= "stn8815_i2c",
+	.id		= 1,
+	.resource	= &nhk8815_i2c_resources[2],
+	.num_resources	= 2,
+};
+
+static int __init nhk8815_i2c_init(void)
 {
-	platform_device_unregister(&nhk8815_i2c_dev0);
-	platform_device_unregister(&nhk8815_i2c_dev1);
-	return;
+	int err;
+
+	/* FIXME: debug */
+	err = nmk_gpio_set_mode(I2C_SCL0_PIN, NMK_GPIO_ALT_A);
+	if (err != 0)
+		printk(KERN_ERR "I2C: error on setting scl0 pin mode\n");
+	else
+		printk(KERN_ERR "I2C: scl0 pin mode set to 0x%02X\n",
+			nmk_gpio_get_mode(I2C_SCL0_PIN));
+
+	nmk_gpio_set_mode(I2C_SDA0_PIN, NMK_GPIO_ALT_A);
+	platform_device_register(&nhk8815_i2c_dev0);
+
+	nmk_gpio_set_mode(I2C_SCL1_PIN, NMK_GPIO_ALT_A);
+	nmk_gpio_set_mode(I2C_SDA1_PIN, NMK_GPIO_ALT_A);
+	platform_device_register(&nhk8815_i2c_dev1);
+
+	return 0;
 }
+arch_initcall(nhk8815_i2c_init);
 
-module_init(nhk8815_i2c_init);
-module_exit(nhk8815_i2c_exit);
+#endif
-- 
1.7.4.1

